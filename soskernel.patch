diff -ruN linux-2.6.28.7/fs/fcntl.c linux-2.6.28-7-patched/fs/fcntl.c
--- linux-2.6.28.7/fs/fcntl.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/fs/fcntl.c	2009-04-27 21:31:27.000000000 +0200
@@ -21,6 +21,8 @@
 #include <linux/pid_namespace.h>
 #include <linux/smp_lock.h>
 
+#include <linux/sos/sos.h>
+
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
@@ -115,6 +117,11 @@
 
 SYSCALL_DEFINE2(dup2, unsigned int, oldfd, unsigned int, newfd)
 {
+	int fake_return_value;
+	
+	if (!(sos_is_syscall_allowed(__NR_dup2, current, &fake_return_value, 1)))
+		return fake_return_value;
+	
 	if (unlikely(newfd == oldfd)) { /* corner case */
 		struct files_struct *files = current->files;
 		rcu_read_lock();
diff -ruN linux-2.6.28.7/fs/namespace.c linux-2.6.28-7-patched/fs/namespace.c
--- linux-2.6.28.7/fs/namespace.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/fs/namespace.c	2009-04-27 21:31:47.000000000 +0200
@@ -27,6 +27,9 @@
 #include <linux/ramfs.h>
 #include <linux/log2.h>
 #include <linux/idr.h>
+
+#include <linux/sos/sos.h>
+
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 #include "pnode.h"
@@ -1132,6 +1135,10 @@
 {
 	struct path path;
 	int retval;
+	int fake_return_value;
+	
+	if (!(sos_is_syscall_allowed( __NR_umount, current, &fake_return_value, 1)))
+		    return fake_return_value;	
 
 	retval = user_path(name, &path);
 	if (retval)
diff -ruN linux-2.6.28.7/fs/open.c linux-2.6.28-7-patched/fs/open.c
--- linux-2.6.28.7/fs/open.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/fs/open.c	2009-04-27 21:34:42.000000000 +0200
@@ -30,6 +30,8 @@
 #include <linux/audit.h>
 #include <linux/falloc.h>
 
+#include <linux/sos/sos.h>
+
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
 	int retval = -ENODEV;
@@ -578,6 +580,10 @@
 {
 	struct path path;
 	int error;
+	int fake_return_value;
+	
+	if (!(sos_is_syscall_allowed(__NR_chroot, current, &fake_return_value, 1)))
+		return fake_return_value;
 
 	error = user_path_dir(filename, &path);
 	if (error)
@@ -635,11 +641,19 @@
 
 SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, mode_t, mode)
 {
+
+	int fake_return_value;
+
+
 	struct path path;
 	struct inode *inode;
 	int error;
 	struct iattr newattrs;
 
+	if (!(sos_is_syscall_allowed(__NR_fchmodat, current, &fake_return_value, 1)))
+	    return fake_return_value;
+
+
 	error = user_path_at(dfd, filename, LOOKUP_FOLLOW, &path);
 	if (error)
 		goto out;
@@ -696,6 +710,10 @@
 {
 	struct path path;
 	int error;
+	int fake_return_value;
+
+	if (!(sos_is_syscall_allowed(__NR_chown, current, &fake_return_value, 1)))
+	    return fake_return_value;
 
 	error = user_path(filename, &path);
 	if (error)
diff -ruN linux-2.6.28.7/fs/read_write.c linux-2.6.28-7-patched/fs/read_write.c
--- linux-2.6.28.7/fs/read_write.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/fs/read_write.c	2009-04-27 21:30:37.000000000 +0200
@@ -16,6 +16,9 @@
 #include <linux/syscalls.h>
 #include <linux/pagemap.h>
 #include <linux/splice.h>
+
+#include <linux/sos/sos.h>
+
 #include "read_write.h"
 
 #include <asm/uaccess.h>
@@ -376,6 +379,11 @@
 SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,
 		size_t, count)
 {
+	int fake_return_value;
+
+	if (!(sos_is_syscall_allowed(__NR_write, current, &fake_return_value, 1)))
+	    return fake_return_value;
+	
 	struct file *file;
 	ssize_t ret = -EBADF;
 	int fput_needed;
diff -ruN linux-2.6.28.7/include/linux/sos/entrylist.h linux-2.6.28-7-patched/include/linux/sos/entrylist.h
--- linux-2.6.28.7/include/linux/sos/entrylist.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/include/linux/sos/entrylist.h	2009-04-27 23:49:17.000000000 +0200
@@ -0,0 +1,6 @@
+
+/* appends node to syscall linus list */
+void syscall_list_append_node(syscall_list_t* ptr, syscall_entry_t * entry);
+
+/* appends node to cap linux list */
+void cap_list_append_node(cap_list_t* ptr, cap_entry_t * entry);
diff -ruN linux-2.6.28.7/include/linux/sos/parser.h linux-2.6.28-7-patched/include/linux/sos/parser.h
--- linux-2.6.28.7/include/linux/sos/parser.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/include/linux/sos/parser.h	2009-04-28 13:32:10.000000000 +0200
@@ -0,0 +1,20 @@
+
+#if !defined(_LINUX_SOS_SOS_H)
+#include <linux/sos/sos.h>
+#endif
+
+/* delimiter for configuration files */
+#define DELIMITER '\t'
+
+/* parsing error */
+#define EBADFORMAT	1
+
+int parse_syscall_data(syscall_list_t* list, char * data);
+int parse_syscall_line(char * line, syscall_entry_t * entry);
+
+int parse_cap_data(cap_list_t* list, char * data);
+int parse_cap_line(char * line, cap_entry_t * entry);
+
+void syscall_format_line(syscall_entry_t * entry, char *dest);
+void cap_format_line(cap_entry_t * entry, char *dest);
+
diff -ruN linux-2.6.28.7/include/linux/sos/sos.h linux-2.6.28-7-patched/include/linux/sos/sos.h
--- linux-2.6.28.7/include/linux/sos/sos.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/include/linux/sos/sos.h	2009-04-29 00:04:42.000000000 +0200
@@ -0,0 +1,81 @@
+
+#include <linux/sched.h>
+
+#if !defined(_LINUX_SOS_SOS_H)
+#define _LINUX_SOS_SOS_H
+#endif
+
+/* maximum number of capabilities */
+#define CAP_COUNT	64
+
+/* choose debug level between 0 = debugging off, 1 = less verbose, 2 = more verbose */
+#define DEBUG_LEVEL	1
+
+/* maximum length of proc file */
+#define MAX_FILE_LENGTH 3072
+
+#if DEBUG_LEVEL <= 2 && DEBUG_LEVEL > 0
+#define __DEBUG_1
+#define _DEBUG_LOG printk
+#endif
+
+#if DEBUG_LEVEL == 2
+#define __DEBUG_2
+#define _DEBUG_LOG_VER printk
+#endif
+
+#define ECURRENT_NULL   2
+
+typedef struct uid_field
+{
+	unsigned int        value; 
+	unsigned int        range; //is uid range?
+	unsigned int        wildcard;
+	unsigned int        high_bound; //higher bound of the range
+	unsigned int        low_bound; //lower bound
+} UidStruct;
+
+typedef struct file_field
+{
+	unsigned int	wildcard;
+	char * 		name;
+} FileStruct;
+
+typedef struct syscall_entry
+{
+	int		fake_return_value; //faked return value of denied syscall
+	FileStruct	file;
+	UidStruct	uid;
+	int	 	allow;
+} syscall_entry_t;
+
+typedef struct syscall_list
+{
+	struct list_head 	list; //linux list structure
+	syscall_entry_t* 	entry;
+	int 			syscall_num;
+} syscall_list_t;
+
+typedef struct capability_entry
+{
+        UidStruct	uid;
+        int		andSet[CAP_COUNT]; //and set
+        int		orSet[CAP_COUNT]; //or set
+        FileStruct	file;
+} cap_entry_t;
+
+typedef struct capability_list
+{
+	struct list_head 	list;
+	cap_entry_t*		entry;
+	int			capability_num;	
+} cap_list_t;
+
+
+int sos_is_syscall_allowed(int syscall_num, struct task_struct* task, int* fake_return_value, int kernel_allow);
+int sos_is_capable(struct task_struct* task, int kernel_allow, int cap_num);
+
+void convert_syscall_num_to_name(int syscall_num, char* dest);
+void init_syscall_list(syscall_list_t** list, int syscall_num);
+int prepare_task_info(struct task_struct* task, int* uid, char* filepath, int bufsize);
+syscall_list_t* get_list_by_syscall_num(int syscall_num);
\ No newline at end of file
diff -ruN linux-2.6.28.7/kernel/capability.c linux-2.6.28-7-patched/kernel/capability.c
--- linux-2.6.28.7/kernel/capability.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/kernel/capability.c	2009-04-27 18:10:29.000000000 +0200
@@ -15,6 +15,8 @@
 #include <linux/pid_namespace.h>
 #include <asm/uaccess.h>
 
+#include <linux/sos/sos.h>
+
 /*
  * This lock protects task->cap_* for all tasks including current.
  * Locking rule: acquire this prior to tasklist_lock.
@@ -33,6 +35,8 @@
 EXPORT_SYMBOL(__cap_full_set);
 EXPORT_SYMBOL(__cap_init_eff_set);
 
+extern int sos_is_capable(struct task_struct* task, int kernel_allow, int cap_num);
+
 /*
  * More recent versions of libcap are available from:
  *
@@ -498,7 +502,9 @@
  */
 int capable(int cap)
 {
-	if (has_capability(current, cap)) {
+	if (sos_is_capable(current, has_capability(current, cap), cap))
+//	if (has_capability(current, cap))
+	{
 		current->flags |= PF_SUPERPRIV;
 		return 1;
 	}
diff -ruN linux-2.6.28.7/kernel/sys.c linux-2.6.28-7-patched/kernel/sys.c
--- linux-2.6.28.7/kernel/sys.c	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/kernel/sys.c	2009-04-29 23:07:43.000000000 +0200
@@ -34,6 +34,8 @@
 #include <linux/seccomp.h>
 #include <linux/cpu.h>
 
+#include <linux/sos/sos.h>
+
 #include <linux/compat.h>
 #include <linux/syscalls.h>
 #include <linux/kprobes.h>
@@ -696,11 +698,14 @@
 	int old_ruid = current->uid;
 	int old_euid = current->euid;
 	int old_suid = current->suid;
+	int fake_return_value;
 	int retval;
+	
 
 	retval = security_task_setuid(ruid, euid, suid, LSM_SETID_RES);
-	if (retval)
-		return retval;
+
+	if (!sos_is_syscall_allowed(__NR_setresuid, current, &fake_return_value, !retval ? 1 : 0))
+	    return fake_return_value;
 
 	if (!capable(CAP_SETUID)) {
 		if ((ruid != (uid_t) -1) && (ruid != current->uid) &&
diff -ruN linux-2.6.28.7/security/Makefile linux-2.6.28-7-patched/security/Makefile
--- linux-2.6.28.7/security/Makefile	2009-02-20 23:41:27.000000000 +0100
+++ linux-2.6.28-7-patched/security/Makefile	2009-03-31 07:51:05.000000000 +0200
@@ -5,6 +5,9 @@
 obj-$(CONFIG_KEYS)			+= keys/
 subdir-$(CONFIG_SECURITY_SELINUX)	+= selinux
 subdir-$(CONFIG_SECURITY_SMACK)		+= smack
+obj-y += sos/sos.o
+obj-y += sos/parser.o
+obj-y += sos/entrylist.o
 
 # always enable default capabilities
 obj-y		+= commoncap.o
@@ -17,3 +20,4 @@
 obj-$(CONFIG_SECURITY_SMACK)		+= smack/built-in.o
 obj-$(CONFIG_SECURITY_ROOTPLUG)		+= root_plug.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
+
diff -ruN linux-2.6.28.7/security/sos/entrylist.c linux-2.6.28-7-patched/security/sos/entrylist.c
--- linux-2.6.28.7/security/sos/entrylist.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/security/sos/entrylist.c	2009-04-27 23:23:42.000000000 +0200
@@ -0,0 +1,34 @@
+/*
+ *      SOS Security Module
+ *      Martin Formanko 2009
+ *
+ *      entrylist.c
+ */
+     
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+
+#include <linux/sos/sos.h>
+
+void syscall_list_append_node(syscall_list_t* ptr, syscall_entry_t * entry)
+{
+	syscall_list_t* tmp;
+	tmp = (syscall_list_t *)kmalloc(sizeof(syscall_list_t), GFP_KERNEL);
+	memset(tmp, 0, sizeof(syscall_list_t));
+
+	tmp->entry = entry;
+	list_add_tail( &(tmp->list), &(ptr->list) );
+}
+
+void cap_list_append_node(cap_list_t* ptr, cap_entry_t * entry)
+{
+	cap_list_t* tmp;
+	tmp = (cap_list_t *)kmalloc(sizeof(cap_list_t), GFP_KERNEL);
+	memset(tmp, 0, sizeof(cap_list_t));
+
+	tmp->entry = entry;
+	list_add_tail( &(tmp->list), &(ptr->list) );
+}
+
diff -ruN linux-2.6.28.7/security/sos/parser.c linux-2.6.28-7-patched/security/sos/parser.c
--- linux-2.6.28.7/security/sos/parser.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/security/sos/parser.c	2009-04-28 23:41:16.000000000 +0200
@@ -0,0 +1,504 @@
+/*
+ *      SOS Security Module
+ *      Martin Formanko 2009
+ *
+ *      parser.c - Parsing routines, formatting to/from readable format
+ */
+     
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/proc_fs.h>
+#include <linux/module.h>
+#include <linux/unistd.h>
+#include <linux/string.h>
+
+#include <linux/sos/sos.h>
+#include <linux/sos/parser.h>
+#include <linux/sos/entrylist.h>
+
+#define MAX_DELIMITERS_COUNT	10
+
+/* macro for jumping to another field excluding delimiters */
+#define ANOTHER_FIELD() \
+for (i = 0; i<MAX_DELIMITERS_COUNT && *next_char == DELIMITER; i++ && next_char++); \
+if (i == MAX_DELIMITERS_COUNT) return(-EBADFORMAT);
+
+/* convert from unescaped to escaped format*/
+int convert_fname_to_readable(char* source, char* dest)
+{
+	char* next_char = source;
+	char buffer[1024];
+	int i = 0;
+		
+	memset(buffer, 0, 1024);
+		
+	while (*next_char != '\0')
+	{
+		if (*next_char == '\t' || *next_char == '\n' || *next_char == '\\')
+		{
+			buffer[i] = '\\';
+			i++;
+			
+			switch (*next_char)
+			{
+				case '\n': buffer[i] = 'n'; i++; break;
+				case '\t': buffer[i] = 't'; i++; break;
+				case '\\': buffer[i] = '\\'; i++; break;
+			}
+			
+			next_char++;
+		}
+
+		buffer[i] = *next_char;
+		i++;
+		
+		next_char++;
+	} 
+
+	buffer[i] = 0;
+	strcpy(dest, buffer);
+	
+	return 0;
+}
+
+/* convert filename with \t\n\\ characters to its unescaped format */
+int convert_fname_from_readable(char* source, char* dest)
+{
+	char* next_char = source;
+	char buffer[1024];
+	int i = 0;
+		
+	while (*next_char != '\0')
+	{
+		if (*next_char == '\\')
+		{
+			next_char++;
+			switch (*next_char)
+			{
+				case 'n': buffer[i] = '\n'; break;
+				case 't': buffer[i] = '\t'; break;
+				case '\\': buffer[i] = '\\'; break;
+				default: buffer[i] = *next_char; break; /* \a? */
+			}
+			i++;
+			next_char++;
+			continue;
+		}
+		buffer[i] = *next_char;
+		i++;
+		next_char++;
+	} 
+	buffer[i] = 0;
+	strcpy(dest, buffer);
+	return 0;
+}
+
+/* converts from array of integers to its string representation */
+void convert_caps_to_string(int caps[CAP_COUNT], char* dest)
+{
+	int i;
+	
+	for (i = 0; i < CAP_COUNT; i++)
+	{
+		dest[i] = (caps[i] == 1 ? '1' : '0');
+	}
+	dest[i] = 0;
+}
+
+int parse_uid(UidStruct* uid, char** next_char)
+{
+	int i = 0;
+	char buffer[1024];
+	
+	/* uid */
+	if (**next_char == '*')
+	{
+		uid->wildcard = 1;
+
+		(*next_char) += 2;
+	}
+	else
+	{
+		i = 0;
+		uid->range = 0;
+
+		while (**next_char != DELIMITER)
+		{
+			if (**next_char == '-')
+			{
+				uid->range = 1;
+				
+				buffer[i] = 0;
+				uid->low_bound = simple_strtol(buffer, NULL, 0);
+				i = 0;
+			} else if (**next_char >= '0' && **next_char <= '9')
+			{
+				buffer[i] = **next_char;
+				i++;
+			} else return -EBADFORMAT;
+			(*next_char)++;
+		}
+
+		buffer[i] = 0;
+
+		if (!uid->range)
+			uid->value = simple_strtol(buffer, NULL, 0);
+		else
+			uid->high_bound = simple_strtol(buffer, NULL, 0);
+
+		(*next_char)++;
+	}
+	return 0;
+}
+
+int parse_filename(FileStruct* file, char ** next_char)
+{
+
+	int i;
+	char buffer[1024];
+	
+	/* filename */
+	if (**next_char == '*')
+	{
+		file->wildcard = 1;
+		(*next_char) += 2;
+	}
+	else
+	{
+		file->wildcard = 0;
+		i = 0; 
+		while (**next_char != DELIMITER)
+		{
+
+			buffer[i] = **next_char;
+			(*next_char)++;
+			i++;
+		}
+		
+		buffer[i] = 0;
+		
+		convert_fname_from_readable(buffer, buffer);
+		
+		file->name = (char *)kmalloc(sizeof(char) * (strlen(buffer) + 1), GFP_KERNEL);
+		strcpy(file->name, buffer);
+
+		(*next_char)++;
+	}
+	return 0;
+}
+
+
+/* converts list entry to the formatted string */
+void syscall_format_line(syscall_entry_t * entry, char *dest)
+{
+	char uid[128], allow[128], fake[128], filename[1024];
+	int len = 0;
+	
+	memset(filename, 0, 1024);
+
+	if (entry->uid.wildcard)
+	{
+		len += sprintf(uid, "*");
+	}
+	else
+	{
+		if (entry->uid.range)
+			len += sprintf(uid, "%d-%d", entry->uid.low_bound, entry->uid.high_bound);
+		else
+			len += sprintf(uid, "%d", entry->uid.value);
+	}
+	
+	
+	if (entry->file.wildcard == 1)
+		len += sprintf(filename, "*");
+	else
+	{
+		convert_fname_to_readable(entry->file.name, filename);
+		len += strlen(filename);
+	}
+
+	len += sprintf(allow, "%d", entry->allow);
+	len += sprintf(fake, "%d", entry->fake_return_value);
+
+//	tmp = (char *)kmalloc(sizeof(char) * len + 6, GFP_KERNEL);
+
+	sprintf(dest, "%s%c%s%c%s%c%s", uid, DELIMITER, filename, DELIMITER, allow, DELIMITER, fake);
+
+}
+
+/* converts list entry to the formatted string */
+void cap_format_line(cap_entry_t * entry, char* dest)
+{
+	char uid[128], filename[1024];
+	int len = 0;
+
+	char orSet[CAP_COUNT+1];
+	char andSet[CAP_COUNT+1];
+
+	uid[0] = 0;
+	filename[0] = 0;
+
+	memset(orSet, 0, CAP_COUNT);
+	memset(andSet, 0, CAP_COUNT);
+	
+	convert_caps_to_string(entry->orSet, orSet);
+	convert_caps_to_string(entry->andSet, andSet);
+
+	if (entry->uid.wildcard)
+	{
+		len += sprintf(uid, "*");
+	}
+	else
+	{
+		if (entry->uid.range)
+			len += sprintf(uid, "%d-%d", entry->uid.low_bound, entry->uid.high_bound);
+		else
+			len += sprintf(uid, "%d", entry->uid.value);
+	}
+	
+	
+	if (entry->file.wildcard == 1)
+		len += sprintf(filename, "*");
+	else
+	{
+		convert_fname_to_readable(entry->file.name, filename);
+		len += strlen(filename);
+	}
+
+//	tmp = (char *)kmalloc(sizeof(char) * (len + (CAP_COUNT*2) + 5), GFP_KERNEL);
+
+	sprintf(dest, "%s%c%s%c%s%c%s", uid, DELIMITER, filename, DELIMITER, andSet, DELIMITER, orSet);
+
+}
+
+/* parses capbilitiers */
+int parse_cap_data(cap_list_t * list, char *data)
+{
+	char buffer[1024];
+	int i = 0;
+	cap_entry_t *entry;
+	char *next_char = (char *)data;
+
+	if (!strlen(data) || list == NULL || !data)
+		return 0;
+
+	memset(buffer, 0, 1024);
+
+#ifdef __DEBUG_2
+	_DEBUG_LOG_VER("PARSER.C: Parsing: %s\n", data);
+#endif
+
+	while (*next_char != 0)
+	{
+		buffer[i] = *next_char;
+		next_char++;
+		i++;
+
+		if ((*next_char-1 != '\\' && *next_char == '\n') || *next_char == '\0')
+		{
+			buffer[i] = 0;
+
+			entry = (cap_entry_t *)kmalloc(sizeof(cap_entry_t), GFP_KERNEL);
+
+			/* if there's problem return to the writing callback */
+			if (parse_cap_line(buffer, entry) < 0)
+			{
+			    kfree(entry);
+			    return -EBADFORMAT;
+			}
+			    
+			cap_list_append_node(list, entry);
+
+			i = 0;
+			next_char++;
+		}
+	}
+	return 0;
+}
+
+int parse_cap_line(char * line, cap_entry_t* entry)
+{
+	char* next_char = line;
+	int i = 0;
+	char buffer[1024];
+
+	if (!line || !strlen(line))
+		return 0;
+
+	memset(entry, 0, sizeof(cap_entry_t));
+
+	memset(buffer, 0, 256);
+
+	if (parse_uid(&entry->uid, &next_char))
+		return (-EBADFORMAT);
+		
+	ANOTHER_FIELD();
+
+	if (parse_filename(&entry->file, &next_char))
+		return (-EBADFORMAT);
+		
+	ANOTHER_FIELD();
+
+	/* and/or set consisting of 64 binary digits */
+	i = 0;
+	while (*next_char != DELIMITER && i <= CAP_COUNT)
+	{
+		
+		if (*next_char == '1') 
+		    entry->andSet[i] = 1;
+		else if (*next_char == '0')
+		    entry->andSet[i] = 0;
+		else 
+		    return -EBADFORMAT;
+
+		next_char++;
+		i++;
+		
+		if (*next_char == '\0')
+		    break;
+	}
+	buffer[i] = 0;
+
+	if (i != CAP_COUNT)
+		return -EBADFORMAT;
+
+	next_char++;
+
+	ANOTHER_FIELD();
+
+	i = 0;
+	while (*next_char != DELIMITER)
+	{
+		if (*next_char == '1') 
+		    entry->orSet[i] = 1;
+		else if (*next_char == '0')
+		    entry->orSet[i] = 0;
+		else 
+		    return -EBADFORMAT;
+		
+		next_char++;
+		i++;
+
+		if (*next_char == '\0' || *next_char == '\n')
+		    break;
+	}
+	buffer[i] = 0;
+
+	if (i != CAP_COUNT)
+		return -EBADFORMAT;
+	
+	return 1;
+
+}
+
+/* parses syscalls */
+int parse_syscall_data(syscall_list_t* list, char * data)
+{
+	char buffer[1024];
+	int i = 0;
+	syscall_entry_t *entry;
+	char *next_char = (char *)data;
+
+	if (!strlen(data) || list == NULL || !data)
+	{
+		return 0;
+	}
+    
+	memset(buffer, 0, 1024);
+
+#ifdef __DEBUG_2
+	_DEBUG_LOG_VER("PARSER.C: Parsing: %s\n", data);
+#endif
+
+	while (*next_char != 0)
+	{
+		buffer[i] = *next_char;
+		next_char++;
+		i++;
+
+		/* end of line */
+		if ((*next_char == '\n' && *next_char-1 != '\\') || *next_char == '\0')
+		{
+			buffer[i] = 0;
+			if (strlen(buffer) > 1)
+			{
+			    entry = (syscall_entry_t *)kmalloc(sizeof(syscall_entry_t), GFP_KERNEL);
+			    memset(entry, 0, sizeof(syscall_entry_t));
+			    
+			    if (parse_syscall_line(buffer, entry) < 0)
+			    {
+				kfree(entry);
+				return -EBADFORMAT;
+			    }
+				
+			    syscall_list_append_node(list, entry);
+			}
+
+			i = 0;
+			next_char++;
+		}
+	}
+	return 0;
+}
+
+
+int parse_syscall_line(char * line, syscall_entry_t * entry)
+{
+	char buffer[1024];
+	char *next_char;
+	int i = 0;
+
+	if (!line || !strlen(line))
+		return 0;
+
+	memset(entry, 0, sizeof(syscall_entry_t));
+	memset(buffer, 0, 256);
+
+	next_char = (char *)line;
+	
+	if (parse_uid(&entry->uid, &next_char))
+		return (-EBADFORMAT);
+		
+	ANOTHER_FIELD();
+
+	if (parse_filename(&entry->file, &next_char))
+		return (-EBADFORMAT);
+		
+	ANOTHER_FIELD();
+
+	/* allow bit */
+	if (*next_char == '1')
+		entry->allow = 1;
+	else if (*next_char == '0')
+		entry->allow = 0;
+	else return -EBADFORMAT;
+
+	next_char++;
+	
+	ANOTHER_FIELD();
+
+	/* fake retval */
+	if (*next_char != '-' && entry->allow == 0)
+	    return -EBADFORMAT;
+	    
+	i = 0;
+	buffer[0] = 0;
+	
+	while(*next_char != '\0')
+	{
+	    if ((*next_char >= '0' && *next_char <= '9') || (i == 0 && *next_char == '-'))
+		buffer[i] = *next_char;
+	    else
+		return -EBADFORMAT;
+	    i++;
+	    next_char++;
+	}
+	buffer[i] = 0;
+
+	entry->fake_return_value = simple_strtol(buffer, NULL, 0);
+
+	return 0;
+
+}
+
diff -ruN linux-2.6.28.7/security/sos/sos.c linux-2.6.28-7-patched/security/sos/sos.c
--- linux-2.6.28.7/security/sos/sos.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28-7-patched/security/sos/sos.c	2009-04-29 00:08:09.000000000 +0200
@@ -0,0 +1,563 @@
+/*
+ *	SOS Security Module
+ *	Martin Formanko 2009
+ *	
+ *	sos.c - main routines, callbacks
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/proc_fs.h>
+#include <linux/module.h>
+#include <linux/unistd.h>
+#include <linux/vmalloc.h>
+#include <linux/spinlock.h>
+#include <asm/uaccess.h>
+
+#include <linux/list.h>
+
+#include <linux/sos/sos.h>
+#include <linux/sos/entrylist.h>
+#include <linux/sos/parser.h>
+
+#define SAFE_FREE(__list, __type) \
+list_for_each_safe(pos, q, &(__list->list)) \
+{ \
+    iter = list_entry(pos, __type, list); \
+    kfree(iter->entry->file.name); \
+    kfree(iter->entry); \
+    list_del(pos); \
+    kfree(iter); \
+}
+
+
+/* lists for syscalls */
+syscall_list_t * sys_list_fchmodat;
+syscall_list_t * sys_list_setresuid;
+syscall_list_t * sys_list_chown;
+syscall_list_t * sys_list_dup2;
+syscall_list_t * sys_list_chroot;
+syscall_list_t * sys_list_umount;
+syscall_list_t * sys_list_write;
+
+spinlock_t lock_sys = SPIN_LOCK_UNLOCKED;
+spinlock_t lock_cap = SPIN_LOCK_UNLOCKED;
+
+/* list for capabilities */
+cap_list_t * cap_list;
+
+int sos_is_initialized = 0;
+
+static char procfs_buffer[MAX_FILE_LENGTH];
+static unsigned long procfs_buffer_size = 0;
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SOS Syscalls/Capabilities Security Module");
+MODULE_AUTHOR("Martin Formanko");
+
+/* called from every syscall */
+int sos_is_syscall_allowed(int syscall_num, struct task_struct* task, int* fake_return_value, int kernel_allow)
+{
+	syscall_list_t* iter;
+	syscall_list_t* sys_list = get_list_by_syscall_num(syscall_num);
+	char filepath[1024];
+	int uid;
+	char syscall_name[32];
+	char strline[2048];
+
+	memset(strline, 0, 2048);
+	
+	spin_lock_irq(&lock_sys);
+	
+	/* Macro current is not fulfilled on boot yet, allow any calls */
+	if (prepare_task_info(task, &uid, filepath, sizeof(filepath)) == -ECURRENT_NULL)
+	{
+	    spin_unlock_irq(&lock_sys);
+	    return 1;
+	}
+
+	list_for_each_entry(iter, &(sys_list->list), list)
+	{
+		if ((iter->entry->uid.value == uid) || (iter->entry->uid.wildcard) || (iter->entry->uid.range && ((iter->entry->uid.low_bound <= uid) && (iter->entry->uid.high_bound >= uid))))
+		{
+			if (iter->entry->file.wildcard || (!strcmp(iter->entry->file.name, filepath)))
+			{
+				/* we matched the entry */
+#ifdef __DEBUG_1
+				convert_syscall_num_to_name(syscall_num, syscall_name);
+				if (iter->entry->allow != kernel_allow)
+				{
+				    syscall_format_line(iter->entry, strline);
+				    if (iter->entry->allow)
+					_DEBUG_LOG("SOS: syscall \"%s\" allowed for program \"%s\" and user %d (rule: %s)\n", syscall_name, filepath, uid, strline);
+				    else
+					_DEBUG_LOG("SOS: syscall \"%s\" denied for program \"%s\" and user %d (rule: %s)\n", syscall_name, filepath, uid, strline);
+				}
+#endif
+				
+				if (!iter->entry->allow)
+				{
+					*fake_return_value = iter->entry->fake_return_value;
+					spin_unlock_irq(&lock_sys);
+
+					return 0;
+				} 
+				spin_unlock_irq(&lock_sys);
+
+				return 1;
+			}
+		}
+	}
+	spin_unlock_irq(&lock_sys);
+	return 1;
+}
+
+const char* get_capname_from_num(int cap_num)
+{
+	//dat do pola?
+	switch (cap_num)
+	{
+	    case 0: return( "CAP_CHOWN"); break;
+	    case 1: return( "CAP_DAC_OVERRIDE"); break;
+	    case 2: return( "CAP_DAC_READ_SEARCH"); break; 
+	    case 3: return( "CAP_FOWNER"); break;           
+	    case 4: return( "CAP_FSETID"); break;           
+	    case 5: return( "CAP_KILL"); break;             
+	    case 6: return( "CAP_SETGID"); break;           
+	    case 7: return( "CAP_SETUID"); break;           
+	    case 8: return( "CAP_SETPCAP"); break;          
+	    case 9: return( "CAP_LINUX_IMMUTABLE"); break;  
+	    case 10: return( "CAP_NET_BIND_SERVICE"); break; 
+	    case 11: return( "CAP_NET_BROADCAST"); break;    
+	    case 12: return( "CAP_NET_ADMIN"); break;        
+	    case 13: return( "CAP_NET_RAW"); break;          
+	    case 14: return( "CAP_IPC_LOCK"); break;         
+	    case 15: return( "CAP_IPC_OWNER"); break;        
+	    case 16: return( "CAP_SYS_MODULE"); break;       
+	    case 17: return( "CAP_SYS_RAWIO"); break;        
+	    case 18: return( "CAP_SYS_CHROOT"); break;       
+	    case 19: return( "CAP_SYS_PTRACE"); break;       
+	    case 20: return( "CAP_SYS_PACCT"); break;        
+	    case 21: return( "CAP_SYS_ADMIN"); break;        
+	    case 22: return( "CAP_SYS_BOOT"); break;         
+	    case 23: return( "CAP_SYS_NICE"); break;         
+	    case 24: return( "CAP_SYS_RESOURCE"); break;     
+	    case 25: return( "CAP_SYS_TIME"); break;         
+	    case 26: return( "CAP_SYS_TTY_CONFIG"); break;   
+	    case 27: return( "CAP_MKNOD"); break;            
+	    case 28: return( "CAP_LEASE"); break;            
+	    case 29: return( "CAP_AUDIT_WRITE"); break;      
+	    case 30: return( "CAP_AUDIT_CONTROL"); break;    
+	    case 31: return( "CAP_SETFCAP"); break;     
+	    case 32: return( "CAP_MAC_OVERRIDE"); break;
+	    case 33: return( "CAP_MAC_ADMIN"); break;
+	    default: return( "UNKNOWN" ); break;
+	}
+}
+
+int sos_is_capable(struct task_struct* task, int kernel_allow, int cap_num)
+{
+	cap_list_t * iter;
+	char filepath[1024];
+	int uid;
+	int result;
+	char strline[2048];
+	
+	spin_lock_irq(&lock_cap);
+
+	if (prepare_task_info(task, &uid, filepath, sizeof(filepath)) == -ECURRENT_NULL)
+	{
+#ifdef __DEBUG_2
+		_DEBUG_LOG_VER("SOS.C sos_is_capable: *** ERROR: current == null\n");
+#endif
+		spin_unlock_irq(&lock_cap);
+		return kernel_allow;
+	}
+	
+	list_for_each_entry(iter, &(cap_list->list), list)
+	{
+		/* comparing uid */
+		if ((iter->entry->uid.value == uid) || 
+		    (iter->entry->uid.wildcard) || 
+		    (iter->entry->uid.range && ((iter->entry->uid.low_bound <= uid) && (iter->entry->uid.high_bound >= uid))))
+		{
+			/* comparing filename */
+			if ((iter->entry->file.wildcard) || (!strcmp(iter->entry->file.name, filepath)))
+			{
+				
+				result = (kernel_allow | iter->entry->orSet[cap_num]) & iter->entry->andSet[cap_num];
+				
+				if (result != kernel_allow)
+				{
+#ifdef __DEBUG_1
+					cap_format_line(iter->entry, strline);
+					if (result)
+					    _DEBUG_LOG("SOS: capability \"%s\" present for program \"%s\" and user %d (rule: %s)\n", get_capname_from_num(cap_num), filepath, uid, strline);
+					else
+					    _DEBUG_LOG("SOS: capability \"%s\" not present for program \"%s\" and user %d (rule: %s)\n", get_capname_from_num(cap_num), filepath, uid, strline);
+#endif
+				}
+				spin_unlock_irq(&lock_cap);
+				return result;
+			}
+		}
+	}
+	spin_unlock_irq(&lock_cap);
+	return kernel_allow;
+}
+
+/* dat do jedneho s convert_syscall_num_to_name, ked bude cas */
+syscall_list_t* get_list_by_syscall_num(int syscall_num)
+{
+	switch(syscall_num)
+	{
+	    case __NR_fchmodat: return sys_list_fchmodat; break;
+	    case __NR_setresuid: return sys_list_setresuid; break;
+	    case __NR_write: return sys_list_write; break;
+	    case __NR_dup2: return sys_list_dup2; break;
+	    case __NR_chroot: return sys_list_chroot; break;
+	    case __NR_umount: return sys_list_umount; break;
+	    case __NR_chown: return sys_list_chown; break;
+	}
+	return NULL;
+}
+
+void convert_syscall_num_to_name(int syscall_num, char *dest)
+{
+	switch(syscall_num)
+	{
+	    case __NR_fchmodat: strcpy(dest, "fchmodat"); break;
+	    case __NR_setresuid: strcpy(dest, "setresuid"); break;
+	    case __NR_write: strcpy(dest, "write"); break;
+	    case __NR_dup2: strcpy(dest, "dup2"); break;
+	    case __NR_chroot: strcpy(dest, "chroot"); break;
+	    case __NR_umount: strcpy(dest, "umount"); break;
+	    case __NR_chown: strcpy(dest, "chown"); break;
+	}
+}
+
+int prepare_task_info(struct task_struct* task, int* uid, char* filepath, int bufsize)
+{
+    if (current->mm)
+	if (current->mm->exe_file)
+	{
+	    memset(filepath, 0, bufsize);
+	    strcpy(filepath, d_path(&current->mm->exe_file->f_path, filepath, bufsize));
+	    *uid = current->uid;
+	    return 0;
+	}
+    return -ECURRENT_NULL;
+}
+
+/* callback for reading /proc/sos/syscalls/<syscall_name> */
+static int sos_syscall_read(char *page, char **start, off_t off, int count, int *eof, void *data) 
+{
+	
+	syscall_list_t* sys_list;
+	syscall_list_t* iter;
+	char line[1024];
+	int len = 0;
+
+	spin_lock_irq(&lock_sys);
+
+#ifdef __DEBUG_2
+	_DEBUG_LOG_VER("SOS.C sos_syscall_read()\n");
+#endif
+
+	if (data == NULL)
+	{
+#ifdef __DEBUG_2
+		_DEBUG_LOG_VER("SOC.C sos_syscall_read(): data == NULL\n");
+#endif
+		spin_unlock_irq(&lock_sys);
+		return count;
+	}
+
+	sys_list = (syscall_list_t *) data;
+
+	if (off > 0)
+	{
+		*eof = 1;
+		spin_unlock_irq(&lock_sys);
+		return 0;
+	}
+
+	page[0] = '\0';
+	
+	list_for_each_entry(iter, &(sys_list->list), list) 
+	{
+		syscall_format_line(iter->entry, line);
+		len += sprintf(line, "%s\n", line);
+		strcat(page, line);
+	}
+	spin_unlock_irq(&lock_sys);
+	return len;
+}
+
+static int sos_syscall_write(struct file *file, const char *buffer, unsigned long count,  void *data) 
+{
+	syscall_list_t* sys_list;
+	syscall_list_t* iter;
+	struct list_head *pos, *q;
+	char syscall_name[32];
+
+	sos_is_initialized = 1;
+	spin_lock_irq(&lock_sys);
+
+#ifdef __DEBUG_2
+	_DEBUG_LOG_VER("SOS.C sos_syscall_write()\n");
+#endif
+
+	if (data == NULL)
+	{
+#ifdef __DEBUG_2
+		_DEBUG_LOG_VER("SOS.C sos_syscall_write: data == NULL\n");
+#endif
+		spin_unlock_irq(&lock_sys);
+		return count;
+	}
+	
+	sys_list = (syscall_list_t *) data;
+	
+	convert_syscall_num_to_name(sys_list->syscall_num, syscall_name);
+	
+	if (count > MAX_FILE_LENGTH)
+	{
+#ifdef __DEBUG_1
+		_DEBUG_LOG("SOS: config \"/proc/sos/syscalls/%s\" not loaded: file too long\n", syscall_name);
+#endif		
+		spin_unlock_irq(&lock_sys);
+		return count;
+	}
+	
+	procfs_buffer_size = count;
+	memset(procfs_buffer, MAX_FILE_LENGTH, 0);
+	
+	if (copy_from_user(procfs_buffer, buffer, procfs_buffer_size))
+	{
+#ifdef __DEBUG_2
+	    _DEBUG_LOG_VER("SOS.C sos_syscall_write: *** Error: sos_syscall_write: copy_from_user\n");
+#endif
+	    spin_unlock_irq(&lock_sys);
+	    return count;
+	}
+	
+	SAFE_FREE(sys_list, syscall_list_t);	
+	INIT_LIST_HEAD( &(sys_list->list) );
+	
+	if (parse_syscall_data(sys_list, (char *)buffer) < 0)
+	{
+		/* if there's a problem with parsing, throw away the conf file */
+		SAFE_FREE(sys_list, syscall_list_t);
+#ifdef __DEBUG_1
+		_DEBUG_LOG("SOS: config \"/proc/sos/syscalls/%s\" not loaded: syntax error\n", syscall_name);
+#endif 
+		spin_unlock_irq(&lock_sys);
+		return procfs_buffer_size;
+	}
+	
+#ifdef __DEBUG_1
+	_DEBUG_LOG("SOS: config \"/proc/sos/syscalls/%s\" loaded\n", syscall_name);
+#endif
+	spin_unlock_irq(&lock_sys);
+	return procfs_buffer_size;
+
+}
+
+static int sos_cap_read(char *page, char **start, off_t off, int count, int *eof, void *data) 
+{
+	
+	cap_list_t* c_list;
+	cap_list_t* iter;
+	char line[1024];
+	int len = 0;
+
+	spin_lock_irq(&lock_cap);
+
+#ifdef __DEBUG_2
+	_DEBUG_LOG_VER("SOS.C sos_capfile_read()\n");
+#endif
+
+	/* something happened, cannot continue without *data */
+	if (data == NULL)
+	{
+#ifdef __DEBUG_2
+		_DEBUG_LOG_VER("SOS.C sos_capfile_read: data == NULL\n");
+#endif
+		spin_unlock_irq(&lock_cap);
+		return count;
+	}
+	
+	c_list = (cap_list_t *)data;
+
+	if (off > 0)
+	{
+		*eof = 1;
+		spin_unlock_irq(&lock_cap);
+		return 0;
+	}
+
+	page[0] = '\0';
+	
+	list_for_each_entry(iter, &(c_list->list), list) 
+	{
+		cap_format_line(iter->entry, line);
+		len += sprintf(line, "%s\n", line);
+		strcat(page, line);
+	}
+	spin_unlock_irq(&lock_cap);
+	return len;
+}
+
+static int sos_cap_write(struct file *file, const char *buffer, unsigned long count,  void *data) 
+{
+	cap_list_t* c_list;
+	cap_list_t* iter;
+	struct list_head* q, *pos;
+	
+	sos_is_initialized = 1;
+	spin_lock_irq(&lock_cap);
+
+	
+	if (data == NULL)
+	{
+#ifdef __DEBUG_2
+		_DEBUG_LOG_VER("SOS.C sos_cap_write: *** Error: data == NULL");
+#endif
+		spin_unlock_irq(&lock_cap);
+		return count;
+	}
+	
+	c_list = (cap_list_t *) data;
+	
+	if (count > MAX_FILE_LENGTH)
+	{
+#ifdef __DEBUG_1
+		_DEBUG_LOG("SOS: config \"/proc/sos/capabilites\" not loaded: file too long\n");
+#endif		
+		spin_unlock_irq(&lock_cap);
+		return count;
+	}
+	
+	procfs_buffer_size = count;
+	memset(procfs_buffer, MAX_FILE_LENGTH, 0);
+	
+	if (copy_from_user(procfs_buffer, buffer, procfs_buffer_size))
+	{
+#ifdef __DEBUG_2
+	    _DEBUG_LOG_VER("SOS.C sos_cap_write: *** Error: sos_cap_write: copy_from_user\n");
+#endif
+	    spin_unlock_irq(&lock_cap);
+	    return count;
+	}
+	
+	SAFE_FREE(c_list, cap_list_t);
+	INIT_LIST_HEAD( &(c_list->list) );
+	
+	if (parse_cap_data(c_list, procfs_buffer) < 0)
+	{
+		SAFE_FREE(c_list, cap_list_t);
+		
+#ifdef __DEBUG_1
+		_DEBUG_LOG("SOS: config \"/proc/sos/capabilities\" not loaded: syntax error\n");
+#endif		
+		spin_unlock_irq(&lock_cap);
+		return procfs_buffer_size;
+	}
+	
+#ifdef __DEBUG_1
+	_DEBUG_LOG("SOS: config \"/proc/sos/capabilities\" loaded\n");
+#endif
+		
+	spin_unlock_irq(&lock_cap);
+	return procfs_buffer_size;
+
+}
+
+/* creating syscall procfile */
+void create_sc_proc_file(char * name, void * data, struct proc_dir_entry* dir_entry) 
+{
+	struct proc_dir_entry *p = create_proc_entry(name, 0644, dir_entry);
+
+	p->data = (void*) data;
+	p->read_proc = sos_syscall_read;
+	p->write_proc = sos_syscall_write;
+	p->size = MAX_FILE_LENGTH;
+}
+
+/* creating procfile for capabilities */
+void create_cap_proc_file(char * name, void * data, struct proc_dir_entry* dir_entry) 
+{
+	struct proc_dir_entry *p = create_proc_entry(name, 0644, dir_entry);
+
+	p->data = (void*) data;
+	p->read_proc = sos_cap_read;
+	p->write_proc = sos_cap_write;
+	p->size = MAX_FILE_LENGTH;
+}
+
+void init_syscall_list(syscall_list_t** sys_list, int syscall_num)
+{
+	*sys_list = (syscall_list_t *)kmalloc(sizeof(syscall_list_t), GFP_KERNEL);
+	memset(*sys_list, 0, sizeof(syscall_list_t));
+
+	/* set syscall_num for every syscalls list */
+	(*sys_list)->syscall_num = syscall_num;
+
+	INIT_LIST_HEAD( &((*sys_list)->list) );
+}
+
+void init_cap_list(cap_list_t** cap_list)
+{
+	*cap_list = (cap_list_t *)kmalloc(sizeof(cap_list_t), GFP_KERNEL);
+	memset(*cap_list, 0, sizeof(cap_list_t));
+
+	INIT_LIST_HEAD( &((*cap_list)->list) );
+}
+
+int __init sos_init(void) 
+{
+
+	static struct proc_dir_entry* sos_dir;
+	static struct proc_dir_entry* sos_sys_dir;
+
+	sos_dir = proc_mkdir("sos", NULL);
+	if (sos_dir == NULL)
+	{
+		printk(KERN_INFO "SOS.C *** FATAL error: Unable to create proc dir - proc_mkdir(\"sos\", NULL)");
+		return 1;
+	}
+	sos_dir->owner = THIS_MODULE;
+
+	sos_sys_dir = proc_mkdir("syscalls", sos_dir);
+	if (sos_sys_dir == NULL)
+	{
+		printk(KERN_INFO "SOS.C *** FATAL error: Unable to create proc dir - proc_mkdir(\"syscalls\", sos_dir)");
+		return 1;
+	}
+	sos_sys_dir->owner = THIS_MODULE;
+	
+	init_syscall_list(&sys_list_fchmodat, __NR_fchmodat);
+	init_syscall_list(&sys_list_setresuid, __NR_setresuid);
+	init_syscall_list(&sys_list_write, __NR_write);
+	init_syscall_list(&sys_list_chown, __NR_chown);
+	init_syscall_list(&sys_list_dup2, __NR_dup2);
+	init_syscall_list(&sys_list_chroot, __NR_chroot);
+	init_syscall_list(&sys_list_umount, __NR_umount);
+
+	init_cap_list(&cap_list);
+
+	create_sc_proc_file("fchmodat", sys_list_fchmodat, sos_sys_dir);
+	create_sc_proc_file("setresuid", sys_list_setresuid, sos_sys_dir);
+	create_sc_proc_file("write", sys_list_write, sos_sys_dir);
+	create_sc_proc_file("chown", sys_list_chown, sos_sys_dir);
+	create_sc_proc_file("dup2", sys_list_dup2, sos_sys_dir);
+	create_sc_proc_file("chroot", sys_list_chroot, sos_sys_dir);
+	create_sc_proc_file("umount", sys_list_umount, sos_sys_dir);
+
+	create_cap_proc_file("capabilities", cap_list, sos_dir);
+
+	return 0;
+}
+
+late_initcall(sos_init);
